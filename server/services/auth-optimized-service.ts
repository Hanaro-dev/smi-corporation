/**
 * Service d'authentification optimis√©
 * R√©sout les probl√®mes de requ√™tes N+1 avec cache intelligent et requ√™tes uniques
 */
import { createError, getCookie } from 'h3';
import { HTTP_STATUS, ERROR_MESSAGES } from '../constants/api-constants.js';
import { authCache } from './auth-cache-service.js';
import { sessionDb, userDb, roleDb } from '../utils/mock-db-optimized.js';
import type { AuthenticatedEvent, User, Role, Permission } from '../types/index.js';

interface OptimizedAuthResult {
  user: User;
  role: Role;
  permissions: Permission[];
  fromCache: boolean;
  queryCount: number;
}

export class AuthOptimizedService {
  /**
   * Authentification optimis√©e avec cache intelligent
   * R√©duit de 4 requ√™tes √† 1 requ√™te (ou 0 si cache hit)
   */
  static async authenticateUserOptimized(event: AuthenticatedEvent): Promise<OptimizedAuthResult> {
    const token = getCookie(event, "auth_token");
    
    if (!token) {
      throw createError({
        statusCode: HTTP_STATUS.UNAUTHORIZED,
        message: ERROR_MESSAGES.AUTH.TOKEN_REQUIRED
      });
    }

    // √âtape 1: V√©rifier le cache d'abord
    const cachedAuth = authCache.getUserAuthBySession(token);
    if (cachedAuth) {
      // Cache HIT - 0 requ√™te √† la base de donn√©es !
      event.context.user = cachedAuth.user;
      event.context.userRole = cachedAuth.role;
      event.context.permissions = cachedAuth.permissions;

      return {
        user: cachedAuth.user,
        role: cachedAuth.role,
        permissions: cachedAuth.permissions,
        fromCache: true,
        queryCount: 0
      };
    }

    // Cache MISS - Ex√©cuter une requ√™te optimis√©e unique
    const authData = await this.getSingleQueryUserAuth(token);
    
    if (!authData) {
      throw createError({
        statusCode: HTTP_STATUS.UNAUTHORIZED,
        message: ERROR_MESSAGES.AUTH.INVALID_SESSION
      });
    }

    const { user, role, permissions } = authData;

    // Mettre en cache pour les prochaines requ√™tes
    authCache.setUserAuth(user.id.toString(), token, user, role, permissions);

    // D√©finir le contexte de l'√©v√©nement
    event.context.user = user;
    event.context.userRole = role;
    event.context.permissions = permissions;

    return {
      user,
      role,
      permissions,
      fromCache: false,
      queryCount: 1
    };
  }

  /**
   * Requ√™te unique optimis√©e pour r√©cup√©rer user + role + permissions
   * R√©duit 4 requ√™tes s√©par√©es en 1 requ√™te avec JOIN (simulation pour mock DB)
   */
  private static async getSingleQueryUserAuth(token: string): Promise<{
    user: User;
    role: Role;
    permissions: Permission[];
  } | null> {
    try {
      // Pour la base de donn√©es simul√©e, on optimise en regroupant les op√©rations
      const session = sessionDb.findByToken(token);
      if (!session) return null;

      // Requ√™te "combin√©e" simul√©e - en production, ce serait un JOIN SQL
      const authResult = await this.mockOptimizedAuthQuery(session.userId);
      return authResult;

    } catch (error) {
      console.error('Erreur lors de la requ√™te d\'authentification optimis√©e:', error);
      return null;
    }
  }

  /**
   * Simulation d'une requ√™te optimis√©e avec JOIN pour la mock database
   * En production, ceci serait remplac√© par un vrai JOIN SQL
   */
  private static async mockOptimizedAuthQuery(userId: number): Promise<{
    user: User;
    role: Role;
    permissions: Permission[];
  } | null> {
    // R√©cup√©rer l'utilisateur
    const user = await userDb.findById(userId);
    if (!user) return null;

    // R√©cup√©rer le r√¥le avec permissions en une "requ√™te" optimis√©e
    const roleWithPermissions = await this.getRoleWithPermissionsOptimized(user.role_id);
    if (!roleWithPermissions) {
      throw createError({
        statusCode: HTTP_STATUS.INTERNAL_SERVER_ERROR,
        message: ERROR_MESSAGES.AUTH.ROLE_NOT_FOUND
      });
    }

    // Nettoyer l'utilisateur (supprimer le mot de passe)
    const cleanUser = user.toJSON ? user.toJSON() : { ...user };
    delete cleanUser.password;

    return {
      user: cleanUser,
      role: roleWithPermissions.role,
      permissions: roleWithPermissions.permissions
    };
  }

  /**
   * R√©cup√©ration optimis√©e du r√¥le avec ses permissions
   * Simule un JOIN entre Role et Permission
   */
  private static async getRoleWithPermissionsOptimized(roleId: number): Promise<{
    role: Role;
    permissions: Permission[];
  } | null> {
    const role = roleDb.findByPk(roleId);
    if (!role) return null;

    // Version optimis√©e de getPermissions() avec cache
    const permissions = this.getPermissionsOptimized(role);

    return {
      role,
      permissions
    };
  }

  /**
   * Version optimis√©e de getPermissions() qui √©vite les boucles imbriqu√©es
   */
  private static getPermissionsOptimized(role: any): Permission[] {
    // Utiliser un Map pour des lookups O(1) au lieu de O(n)
    const permissionMap = new Map();
    const allPermissions = roleDb.getAllPermissions(); // M√©thode √† ajouter
    
    allPermissions.forEach(permission => {
      permissionMap.set(permission.id, permission);
    });

    // R√©cup√©rer les permissions du r√¥le en une seule passe
    const rolePermissions = roleDb.getRolePermissions(role.id); // M√©thode √† ajouter
    
    return rolePermissions
      .map(rp => permissionMap.get(rp.permissionId))
      .filter(permission => permission !== undefined);
  }

  /**
   * Invalidation intelligente du cache
   */
  static invalidateUserCache(userId: string): void {
    authCache.invalidateUser(userId);
  }

  static invalidateSessionCache(sessionId: string): void {
    authCache.invalidateSession(sessionId);
  }

  /**
   * Statistiques de performance de l'authentification
   */
  static getAuthPerformanceStats(): {
    cache: any;
    averageQueryCount: number;
    optimizationRate: number;
  } {
    const cacheStats = authCache.getStats();
    const optimizationRate = cacheStats.hitRate; // % de requ√™tes √©vit√©es
    
    return {
      cache: cacheStats,
      averageQueryCount: cacheStats.hitRate > 0 ? (1 - cacheStats.hitRate / 100) : 1,
      optimizationRate
    };
  }

  /**
   * Fonction de compatibilit√© pour remplacer l'ancien authenticateUser
   */
  static async authenticateUser(event: AuthenticatedEvent): Promise<User> {
    const result = await this.authenticateUserOptimized(event);
    return result.user;
  }

  /**
   * Pr√©-chargement du cache pour les utilisateurs actifs
   */
  static async warmupAuthCache(activeUserIds: string[]): Promise<void> {
    console.log(`üî• Pr√©-chargement du cache d'authentification pour ${activeUserIds.length} utilisateurs...`);
    
    let warmedUp = 0;
    for (const userId of activeUserIds) {
      try {
        // Simuler une session pour le pr√©-chargement
        const user = await userDb.findById(parseInt(userId));
        if (user) {
          const roleWithPermissions = await this.getRoleWithPermissionsOptimized(user.role_id);
          if (roleWithPermissions) {
            // Cache sans sessionId pour le pr√©-chargement
            authCache.setUserAuth(userId, `warmup-${userId}`, user, roleWithPermissions.role, roleWithPermissions.permissions);
            warmedUp++;
          }
        }
      } catch (error) {
        console.warn(`Erreur lors du pr√©-chargement pour l'utilisateur ${userId}:`, error);
      }
    }
    
    console.log(`‚úÖ Cache pr√©-charg√© avec succ√®s pour ${warmedUp}/${activeUserIds.length} utilisateurs`);
  }
}